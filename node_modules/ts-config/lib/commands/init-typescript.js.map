{"version":3,"file":"init-typescript.js","sourceRoot":"","sources":["../../src/commands/init-typescript.ts"],"names":[],"mappings":";;;;;;;;;AAAA,sDAAwC;AACxC,2CAA6B;AAC7B,oCAAuC;AAE1B,QAAA,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;AAE5D,6CAA6C;AAC7C,MAAqB,cAAe,SAAQ,KAAK,CAAC,OAAO;IAyBhD,KAAK,CAAC,GAAG;QACd,MAAM,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAE3C,qBAAa,CACX,KAAK,CAAC,MAAgB,EACtB;YACE,OAAO,EAAE,CAAC,aAAa,EAAE,cAAc,EAAE,mBAAmB,CAAC;YAC7D,eAAe,kBACb,MAAM,EAAE,QAAQ,EAChB,MAAM,EAAE,UAAU,EAClB,gBAAgB,EAAE,MAAM,EACxB,WAAW,EAAE,IAAI,EACjB,SAAS,EAAE,IAAI,EACf,MAAM,EAAE,IAAI,EACZ,cAAc,EAAE,IAAI,EACpB,kBAAkB,EAAE,IAAI,EACxB,iBAAiB,EAAE,IAAI,EACvB,0BAA0B,EAAE,IAAI,EAChC,gCAAgC,EAAE,IAAI,EACtC,eAAe,EAAE,IAAI,EACrB,MAAM,EAAE,MAAM,IACX,CAAC,KAAK,CAAC,KAAK;gBACb,CAAC,CAAC;oBACE,GAAG,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;oBACtB,GAAG,EAAE,OAAO;iBACb;gBACH,CAAC,CAAC;oBACE,GAAG,EAAE,CAAC,QAAQ,CAAC;iBAChB,CAAC,CACP;SACF,EACD,KAAK,CAAC,KAAK,CACZ,CAAC;QAEF,OAAO;IACT,CAAC;;AA3Da,0BAAW,GACvB,+DAA+D,CAAC;AAEpD,uBAAQ,GAAG;IACvB,eAAe,mBAAW,EAAE;IAC5B,eAAe,mBAAW,iDAAiD;CAC5E,CAAC;AAEY,oBAAK,GAAG;IACpB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,GAAG,EAAC,CAAC;IACnC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;QACzB,IAAI,EAAE,GAAG;QACT,OAAO,EAAE,eAAe;KACzB,CAAC;IACF,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;QACzB,IAAI,EAAE,GAAG;QACT,WAAW,EAAE,0CAA0C;KACxD,CAAC;IACF,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;QACzB,IAAI,EAAE,GAAG;QACT,WAAW,EAAE,6BAA6B;KAC3C,CAAC;CACH,CAAC;AAvBJ,iCA6DC","sourcesContent":["import * as oclif from '@oclif/command';\nimport * as path from 'path';\nimport {writeJsonFile} from '../utils';\n\nexport const commandName = path.basename(__filename, '.js');\n\n// tslint:disable-next-line:no-default-export\nexport default class InitTypeScript extends oclif.Command {\n  public static description =\n    'Creates a TypeScript configuration file with strict settings.';\n\n  public static examples = [\n    `$ ts-config ${commandName}`,\n    `$ ts-config ${commandName} --config='tsconfig.build.json' --force --react`\n  ];\n\n  public static flags = {\n    help: oclif.flags.help({char: 'h'}),\n    config: oclif.flags.string({\n      char: 'c',\n      default: 'tsconfig.json'\n    }),\n    force: oclif.flags.boolean({\n      char: 'f',\n      description: 'overwrite an existing configuration file'\n    }),\n    react: oclif.flags.boolean({\n      char: 'r',\n      description: 'add React-specific settings'\n    })\n  };\n\n  public async run(): Promise<void> {\n    const {flags} = this.parse(InitTypeScript);\n\n    writeJsonFile(\n      flags.config as string,\n      {\n        include: ['src/**/*.ts', 'src/**/*.tsx', 'typings/**/*.d.ts'],\n        compilerOptions: {\n          target: 'ES2017',\n          module: 'commonjs',\n          moduleResolution: 'node',\n          declaration: true,\n          sourceMap: true,\n          strict: true,\n          noUnusedLocals: true,\n          noUnusedParameters: true,\n          noImplicitReturns: true,\n          noFallthroughCasesInSwitch: true,\n          forceConsistentCasingInFileNames: true,\n          esModuleInterop: true,\n          outDir: 'lib/',\n          ...(flags.react\n            ? {\n                lib: ['dom', 'es2017'],\n                jsx: 'react'\n              }\n            : {\n                lib: ['es2017']\n              })\n        }\n      },\n      flags.force\n    );\n\n    return;\n  }\n}\n"]}