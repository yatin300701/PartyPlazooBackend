"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const prettier_1 = require("prettier");
const _1 = require(".");
const init_tslint_1 = require("./commands/init-tslint");
const init_typescript_1 = require("./commands/init-typescript");
const rules_1 = require("./rules");
const utils_1 = require("./utils");
const comments = {
    'switch-default': [
        '**TypeScript-only**: Unnecessary because of the TypeScript setting `--noImplicitReturns`.'
    ]
};
for (const ruleName of Object.keys(rules_1.prettierRules)) {
    comments[ruleName] = [
        ...(comments[ruleName] || []),
        'Unnecessary because of Prettier.'
    ];
}
// tslint:disable-next-line:no-require-imports no-var-requires
const packageName = require('../package.json').name;
// tslint:disable-next-line:no-require-imports no-var-requires
const tsLintVersion = require('tslint/package.json').version;
const readme = `
# ${packageName}

[![Package Version](https://img.shields.io/npm/v/${packageName}.svg)](https://yarnpkg.com/en/package/${packageName})
[![Build Status](https://travis-ci.org/clebert/${packageName}.svg?branch=master)](https://travis-ci.org/clebert/${packageName})

> An opinionated TSLint configuration preset. Works best together with strict
> TypeScript settings and Prettier.

## Getting started

First, install \`${packageName}\` as a dev dependency:

\`\`\`sh
# Install using Yarn
yarn add -D ${packageName} tslint typescript
\`\`\`

\`\`\`sh
# or install using npm
npm install -D ${packageName} tslint typescript
\`\`\`

Then use the [CLI](#${init_tslint_1.commandName}) to create a TSLint configuration
file that extends this configuration preset:

\`\`\`sh
npx ts-config ${init_tslint_1.commandName}
\`\`\`

_Optional:_ Use the [CLI](#${init_typescript_1.commandName}) to create a TypeScript
configuration file with strict settings:

\`\`\`sh
# Create a TypeScript configuration
npx ts-config ${init_typescript_1.commandName}
\`\`\`

\`\`\`sh
# or create a TypeScript configuration for a React project
npx ts-config ${init_typescript_1.commandName} --react
\`\`\`

Now you can run TSLint as follows (assuming that TypeScript and Prettier are
configured accordingly):

\`\`\`sh
# Lint your TS sources
npx tslint --config tslint.json --project . '**/*.{ts,tsx}'
\`\`\`

\`\`\`sh
# and lint your JS sources
npx tslint --config tslint.json '**/*.{js,jsx}'
\`\`\`

## CLI commands

### ${init_tslint_1.commandName}

\`\`\`sh
$ npx ts-config ${init_tslint_1.commandName} help

${utils_1.getHelp(init_tslint_1.commandName)}
\`\`\`

### ${init_typescript_1.commandName}

\`\`\`sh
$ npx ts-config ${init_typescript_1.commandName} help

${utils_1.getHelp(init_typescript_1.commandName)}
\`\`\`

## Configuration preset

This dynamically generated configuration preset is compatible to
[TSLint](https://palantir.github.io/tslint/) in version \`^5.10.0\`. It is based
on the built-in configuration preset \`tslint:all\`:

> **\`tslint:all\`** turns on all rules to their strictest settings. This will
> use type checking, so it must be combined with the \`--project option\`.
> (Exceptions include rules such as \`"ban"\`, \`"import-blacklist"\`, and
> \`"file-header"\`, which have no sensible defaults, and deprecated rules.)

**It is assumed that [TypeScript](https://www.typescriptlang.org/) is configured
with strict settings. Also, it is assumed that [Prettier](https://prettier.io/)
is used for formatting your sources.**

The deviations from the configuration preset
[\`tslint:all@${tsLintVersion}\`](https://github.com/palantir/tslint/blob/${tsLintVersion}/src/configs/all.ts)
are documented below:

- [TypeScript and JavaScript rule overrides](#typescript-and-javascript-rule-overrides)
- [TypeScript-only rule overrides](#typescript-only-rule-overrides)
- [JavaScript-only rule overrides](#javascript-only-rule-overrides)

### TypeScript and JavaScript rule overrides

${Object.keys(_1.rules)
    .sort()
    .filter(ruleName => ruleName in _1.jsRules)
    .map(ruleName => utils_1.renderRule(ruleName, rules_1.allRules, _1.rules, comments[ruleName]))
    .filter(Boolean)
    .join('\n\n')}

### TypeScript-only rule overrides

${Object.keys(_1.rules)
    .sort()
    .filter(ruleName => !(ruleName in _1.jsRules))
    .map(ruleName => utils_1.renderRule(ruleName, rules_1.allRules, _1.rules, comments[ruleName]))
    .filter(Boolean)
    .join('\n\n')}

### JavaScript-only rule overrides

${Object.keys(_1.jsRules)
    .sort()
    .map(ruleName => utils_1.renderRule(ruleName, _1.rules, _1.jsRules, comments[ruleName]))
    .filter(Boolean)
    .join('\n\n')}

---

Copyright (c) 2016-present, Clemens Akens. Released under the terms of the
[MIT License](https://github.com/clebert/${packageName}/blob/master/LICENSE).
`.trimLeft();
const formattedReadme = prettier_1.format(readme, {
    parser: 'markdown',
    proseWrap: 'always'
});
fs_1.writeFileSync('README.md', formattedReadme, { encoding: 'utf8' });
//# sourceMappingURL=create-readme.js.map