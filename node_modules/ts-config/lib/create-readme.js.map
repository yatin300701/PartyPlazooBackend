{"version":3,"file":"create-readme.js","sourceRoot":"","sources":["../src/create-readme.ts"],"names":[],"mappings":";;AAAA,2BAAiC;AACjC,uCAAgC;AAChC,wBAAiC;AACjC,wDAA4E;AAC5E,gEAAoF;AACpF,mCAA0D;AAC1D,mCAA4C;AAE5C,MAAM,QAAQ,GAAwC;IACpD,gBAAgB,EAAE;QAChB,2FAA2F;KAC5F;CACF,CAAC;AAEF,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,qBAAa,CAAe,EAAE;IAC/D,QAAQ,CAAC,QAAQ,CAAC,GAAG;QACnB,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC7B,kCAAkC;KACnC,CAAC;CACH;AAED,8DAA8D;AAC9D,MAAM,WAAW,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC;AAEpD,8DAA8D;AAC9D,MAAM,aAAa,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC,OAAO,CAAC;AAE7D,MAAM,MAAM,GAAG;IACX,WAAW;;mDAEoC,WAAW,yCAAyC,WAAW;iDACjE,WAAW,sDAAsD,WAAW;;;;;;;mBAO1G,WAAW;;;;cAIhB,WAAW;;;;;iBAKR,WAAW;;;sBAGN,yBAAqB;;;;gBAI3B,yBAAqB;;;6BAGR,6BAAyB;;;;;gBAKtC,6BAAyB;;;;;gBAKzB,6BAAyB;;;;;;;;;;;;;;;;;;MAkBnC,yBAAqB;;;kBAGT,yBAAqB;;EAErC,eAAO,CAAC,yBAAqB,CAAC;;;MAG1B,6BAAyB;;;kBAGb,6BAAyB;;EAEzC,eAAO,CAAC,6BAAyB,CAAC;;;;;;;;;;;;;;;;;;;gBAmBpB,aAAa,+CAA+C,aAAa;;;;;;;;;EAStF,MAAM,CAAC,IAAI,CAAC,QAAK,CAAgB;KACjC,IAAI,EAAE;KACN,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,IAAI,UAAO,CAAC;KACvC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,kBAAU,CAAC,QAAQ,EAAE,gBAAQ,EAAE,QAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC1E,MAAM,CAAC,OAAO,CAAC;KACf,IAAI,CAAC,MAAM,CAAC;;;;EAIZ,MAAM,CAAC,IAAI,CAAC,QAAK,CAAgB;KACjC,IAAI,EAAE;KACN,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,UAAO,CAAC,CAAC;KAC1C,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,kBAAU,CAAC,QAAQ,EAAE,gBAAQ,EAAE,QAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC1E,MAAM,CAAC,OAAO,CAAC;KACf,IAAI,CAAC,MAAM,CAAC;;;;EAIZ,MAAM,CAAC,IAAI,CAAC,UAAO,CAAgB;KACnC,IAAI,EAAE;KACN,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,kBAAU,CAAC,QAAQ,EAAE,QAAK,EAAE,UAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;KACzE,MAAM,CAAC,OAAO,CAAC;KACf,IAAI,CAAC,MAAM,CAAC;;;;;2CAK4B,WAAW;CACrD,CAAC,QAAQ,EAAE,CAAC;AAEb,MAAM,eAAe,GAAG,iBAAM,CAAC,MAAM,EAAE;IACrC,MAAM,EAAE,UAAU;IAClB,SAAS,EAAE,QAAQ;CACpB,CAAC,CAAC;AAEH,kBAAa,CAAC,WAAW,EAAE,eAAe,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC","sourcesContent":["import {writeFileSync} from 'fs';\nimport {format} from 'prettier';\nimport {jsRules, rules} from '.';\nimport {commandName as initTsLintCommandName} from './commands/init-tslint';\nimport {commandName as initTypeScriptCommandName} from './commands/init-typescript';\nimport {RuleName, allRules, prettierRules} from './rules';\nimport {getHelp, renderRule} from './utils';\n\nconst comments: {[ruleName in RuleName]?: string[]} = {\n  'switch-default': [\n    '**TypeScript-only**: Unnecessary because of the TypeScript setting `--noImplicitReturns`.'\n  ]\n};\n\nfor (const ruleName of Object.keys(prettierRules) as RuleName[]) {\n  comments[ruleName] = [\n    ...(comments[ruleName] || []),\n    'Unnecessary because of Prettier.'\n  ];\n}\n\n// tslint:disable-next-line:no-require-imports no-var-requires\nconst packageName = require('../package.json').name;\n\n// tslint:disable-next-line:no-require-imports no-var-requires\nconst tsLintVersion = require('tslint/package.json').version;\n\nconst readme = `\n# ${packageName}\n\n[![Package Version](https://img.shields.io/npm/v/${packageName}.svg)](https://yarnpkg.com/en/package/${packageName})\n[![Build Status](https://travis-ci.org/clebert/${packageName}.svg?branch=master)](https://travis-ci.org/clebert/${packageName})\n\n> An opinionated TSLint configuration preset. Works best together with strict\n> TypeScript settings and Prettier.\n\n## Getting started\n\nFirst, install \\`${packageName}\\` as a dev dependency:\n\n\\`\\`\\`sh\n# Install using Yarn\nyarn add -D ${packageName} tslint typescript\n\\`\\`\\`\n\n\\`\\`\\`sh\n# or install using npm\nnpm install -D ${packageName} tslint typescript\n\\`\\`\\`\n\nThen use the [CLI](#${initTsLintCommandName}) to create a TSLint configuration\nfile that extends this configuration preset:\n\n\\`\\`\\`sh\nnpx ts-config ${initTsLintCommandName}\n\\`\\`\\`\n\n_Optional:_ Use the [CLI](#${initTypeScriptCommandName}) to create a TypeScript\nconfiguration file with strict settings:\n\n\\`\\`\\`sh\n# Create a TypeScript configuration\nnpx ts-config ${initTypeScriptCommandName}\n\\`\\`\\`\n\n\\`\\`\\`sh\n# or create a TypeScript configuration for a React project\nnpx ts-config ${initTypeScriptCommandName} --react\n\\`\\`\\`\n\nNow you can run TSLint as follows (assuming that TypeScript and Prettier are\nconfigured accordingly):\n\n\\`\\`\\`sh\n# Lint your TS sources\nnpx tslint --config tslint.json --project . '**/*.{ts,tsx}'\n\\`\\`\\`\n\n\\`\\`\\`sh\n# and lint your JS sources\nnpx tslint --config tslint.json '**/*.{js,jsx}'\n\\`\\`\\`\n\n## CLI commands\n\n### ${initTsLintCommandName}\n\n\\`\\`\\`sh\n$ npx ts-config ${initTsLintCommandName} help\n\n${getHelp(initTsLintCommandName)}\n\\`\\`\\`\n\n### ${initTypeScriptCommandName}\n\n\\`\\`\\`sh\n$ npx ts-config ${initTypeScriptCommandName} help\n\n${getHelp(initTypeScriptCommandName)}\n\\`\\`\\`\n\n## Configuration preset\n\nThis dynamically generated configuration preset is compatible to\n[TSLint](https://palantir.github.io/tslint/) in version \\`^5.10.0\\`. It is based\non the built-in configuration preset \\`tslint:all\\`:\n\n> **\\`tslint:all\\`** turns on all rules to their strictest settings. This will\n> use type checking, so it must be combined with the \\`--project option\\`.\n> (Exceptions include rules such as \\`\"ban\"\\`, \\`\"import-blacklist\"\\`, and\n> \\`\"file-header\"\\`, which have no sensible defaults, and deprecated rules.)\n\n**It is assumed that [TypeScript](https://www.typescriptlang.org/) is configured\nwith strict settings. Also, it is assumed that [Prettier](https://prettier.io/)\nis used for formatting your sources.**\n\nThe deviations from the configuration preset\n[\\`tslint:all@${tsLintVersion}\\`](https://github.com/palantir/tslint/blob/${tsLintVersion}/src/configs/all.ts)\nare documented below:\n\n- [TypeScript and JavaScript rule overrides](#typescript-and-javascript-rule-overrides)\n- [TypeScript-only rule overrides](#typescript-only-rule-overrides)\n- [JavaScript-only rule overrides](#javascript-only-rule-overrides)\n\n### TypeScript and JavaScript rule overrides\n\n${(Object.keys(rules) as RuleName[])\n  .sort()\n  .filter(ruleName => ruleName in jsRules)\n  .map(ruleName => renderRule(ruleName, allRules, rules, comments[ruleName]))\n  .filter(Boolean)\n  .join('\\n\\n')}\n\n### TypeScript-only rule overrides\n\n${(Object.keys(rules) as RuleName[])\n  .sort()\n  .filter(ruleName => !(ruleName in jsRules))\n  .map(ruleName => renderRule(ruleName, allRules, rules, comments[ruleName]))\n  .filter(Boolean)\n  .join('\\n\\n')}\n\n### JavaScript-only rule overrides\n\n${(Object.keys(jsRules) as RuleName[])\n  .sort()\n  .map(ruleName => renderRule(ruleName, rules, jsRules, comments[ruleName]))\n  .filter(Boolean)\n  .join('\\n\\n')}\n\n---\n\nCopyright (c) 2016-present, Clemens Akens. Released under the terms of the\n[MIT License](https://github.com/clebert/${packageName}/blob/master/LICENSE).\n`.trimLeft();\n\nconst formattedReadme = format(readme, {\n  parser: 'markdown',\n  proseWrap: 'always'\n});\n\nwriteFileSync('README.md', formattedReadme, {encoding: 'utf8'});\n"]}